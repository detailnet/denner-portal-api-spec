---
swagger: "2.0"
info:
  version: "2019-10-24T05:00:00Z"
  title: "denner"
host: "denner-api.detailnet.ch"
basePath: "/v1"
schemes:
  - "https"
paths:
  /advertised-articles:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/advertised-articles"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "dbyx1r"
        cacheKeyParameters:
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /advertised-articles/{advertised_article_id}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "advertised_article_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/advertised-articles/{advertised_article_id}"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.path.advertised_article_id: "method.request.path.advertised_article_id"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "lxfelb"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
  /appraisal-statistic:
    get:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "http://denner-portal.detailnet.ch/data/appraisal_statistics.json"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        passthroughBehavior: "when_no_match"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,App-Key,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /appraisals:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "f.email"
          in: "query"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-appraisals-api-${stageVariables.lambda_env}_listAppraisals:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n\
            {\r\n  \"serialization\": {\"group\": \"portal-listing\"},\r\n  \"query\"\
            : \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\
            \r\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "l16zra"
        cacheKeyParameters:
          - "method.request.querystring.f.email"
          - "method.request.querystring.sort"
          - "method.request.querystring.page_size"
          - "method.request.querystring.page"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,App-Key,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /appraisals/{appraisal_id}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "appraisal_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-appraisals-api-${stageVariables.lambda_env}_listAppraisals:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "{\r\n  \"mode\": \"findOne\",\r\n  \"serialization\"\
            : {\"group\": \"portal-listing\"},\r\n  \"query\": \"f._id=$input.params().path.get('appraisal_id')\"\
            \r\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "iov04u"
        cacheKeyParameters:
          - "method.request.path.appraisal_id"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,PATCH,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,App-Key,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
    patch:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "appraisal_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-appraisals-api-${stageVariables.lambda_env}_saveAppraisal:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "{\r\n  \"serialization\": {\"group\": \"portal-listing\"\
            },\r\n  \"appraisal_id\": \"$input.params().path.get('appraisal_id')\"\
            ,\r\n  \"appraisal_data\": $input.json('$')\r\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "iov04u"
        cacheKeyParameters:
          - "method.request.path.appraisal_id"
  /article-groups:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/article-groups"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "a4d8lg"
        cacheKeyParameters:
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.sort"
          - "method.request.querystring.filter"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /articles:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/articles"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "ckulow"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.sort"
          - "method.request.querystring.filter"
  /articles/{article_id}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "quantity"
          in: "query"
          required: false
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "wine-year"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "article_id"
          in: "path"
          required: true
          type: "string"
        - name: "price-selection"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/articles/{article_id}"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.price-selection: "method.request.querystring.price-selection"
          integration.request.querystring.wine-year: "method.request.querystring.wine-year"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.path.article_id: "method.request.path.article_id"
          integration.request.querystring.quantity: "method.request.querystring.quantity"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "ttsbci"
        cacheKeyParameters:
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
          - "method.request.path.article_id"
          - "method.request.querystring.quantity"
          - "method.request.querystring.wine-year"
          - "method.request.querystring.price-selection"
  /articles/{article_id}/text-blocks:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "article_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/articles/{article_id}/text-blocks"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.path.article_id: "method.request.path.article_id"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "3rzs2v"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
  /banners:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-banners-api-${stageVariables.lambda_env}_listBanners:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n\
            {\r\n  \"serialization\": {\"group\": \"portal-listing\"},\r\n  \"query\"\
            : \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\
            \r\n}"
        passthroughBehavior: "when_no_match"
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "201":
          description: "201 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-banners-api-${stageVariables.lambda_env}_saveBanner:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "{\r\n  \"serialization\": {\"group\": \"portal-listing\"\
            },\r\n  \"banner_data\": $input.json('$')\r\n}"
        passthroughBehavior: "when_no_match"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,Access-Control-Allow-Origin,App-Key,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /banners/{banner_id}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "banner_id"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-banners-api-${stageVariables.lambda_env}_listBanners:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "{\r\n  \"mode\": \"findOne\",\r\n  \"serialization\"\
            : {\"group\": \"portal-listing\"},\r\n  \"query\": \"f._id=$input.params().path.get('banner_id')\"\
            \r\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "1731ej"
        cacheKeyParameters:
          - "method.request.path.banner_id"
    delete:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "banner_id"
          in: "path"
          required: true
          type: "string"
      responses:
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "204":
          description: "204 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-banners-api-${stageVariables.lambda_env}_deleteBanner:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "204"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "5\\d{2}":
            statusCode: "500"
        requestTemplates:
          application/json: "{\r\n  \"id\": \"$input.params().path.get('banner_id')\"\
            \r\n}"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PATCH'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,App-Key,X-Requested-With'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
    patch:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "banner_id"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-banners-api-${stageVariables.lambda_env}_saveBanner:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "{\r\n  \"serialization\": {\"group\": \"portal-listing\"\
            },\r\n  \"banner_id\": \"$input.params().path.get('banner_id')\",\r\n\
            \  \"banner_data\": $input.json('$')\r\n}"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "1731ej"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.path.banner_id"
  /mobile-wines:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/mobile-wines"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "uudpgz"
        cacheKeyParameters:
          - "method.request.querystring.filter"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.sort"
          - "method.request.header.App-ID"
  /online-filters:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_advertising}/online-filters"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "e8bhi7"
        cacheKeyParameters:
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
  /online-groups:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/online-groups"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "6kao9x"
        cacheKeyParameters:
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.querystring.sort"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /online-publication-articles/{article_id}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "article_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_advertising}/online-publication-articles/{article_id}"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.path.article_id: "method.request.path.article_id"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "90mhl8"
        cacheKeyParameters:
          - "method.request.path.article_id"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /online-publications:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_advertising}/online-publications"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "526f2f"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
  /online-publications/{publication_id}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "publication_id"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_advertising}/online-publications/{publication_id}"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.view-as: "'online_publication.only_active_articles'"
          integration.request.path.publication_id: "method.request.path.publication_id"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "76s57b"
        cacheKeyParameters:
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
          - "method.request.path.publication_id"
  /online-specials:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/online-specials"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "pgucqf"
        cacheKeyParameters:
          - "method.request.querystring.filter"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.sort"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /print-publication-briefings:
    post:
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "201":
          description: "201 response"
        "400":
          description: "400 response"
        "500":
          description: "500 response"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "POST"
        uri: "https://${stageVariables.url_advertising}/print-publication-briefings"
        responses:
          "4\\d{2}":
            statusCode: "400"
          default:
            statusCode: "201"
          "5\\d{2}":
            statusCode: "500"
        requestParameters:
          integration.request.header.App-Key: "stageVariables.advertising_app_key"
          integration.request.header.App-ID: "stageVariables.advertising_app_id"
        passthroughBehavior: "when_no_match"
  /promotion-types:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/promotion-types"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "1ooqzt"
        cacheKeyParameters:
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.querystring.sort"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /promotions:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/promotions"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "lls4zt"
        cacheKeyParameters:
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.sort"
          - "method.request.querystring.filter"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /ratings:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "f.average"
          in: "query"
          required: false
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "f.count"
          in: "query"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-appraisals-api-${stageVariables.lambda_env}_listRatings:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "#set($response = $input.path('$'))\n{\n    \"ratings\"\
                : $response.ratings,\n    \"total_ratings\": $response.total_ratings,\n\
                \    \"total_items\": $response.total_ratings\n}\n"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n\
            {\r\n  \"serialization\": {\"group\": \"portal-listing\"},\r\n  \"query\"\
            : \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\
            \r\n}"
        passthroughBehavior: "when_no_templates"
  /ratings/{article_id}:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "article_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-appraisals-api-${stageVariables.lambda_env}_listRatings:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "{\r\n  \"mode\": \"findOne\",\r\n  \"serialization\"\
            : {\"group\": \"portal-listing\"},\r\n  \"query\": \"f._id=__streq_$input.params().path.get('article_id')\"\
            \r\n}"
        passthroughBehavior: "when_no_templates"
  /screen-publications:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_advertising}/screen-publications"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "u50shc"
        cacheKeyParameters:
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.querystring.sort"
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
  /screen-publications/{publication_id}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "publication_id"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_advertising}/screen-publications/{publication_id}"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.path.publication_id: "method.request.path.publication_id"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "jcgi97"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
          - "method.request.path.publication_id"
  /screen-stores:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_stores}/stores"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "#set($root = $input.path('$'))\n{\n  \"stores\":\
                \ [\n#foreach($store in $root.stores)\n    {\n      \"id\": \"$store.id\"\
                ,\n      \"code\": $store.code,\n      \"calendar_opening_times\"\
                : $store.calendar_opening_times\n    }#if($foreach.hasNext),#end\n\
                \n#end\n  ],\n  \"page_count\": $root.page_count,\n  \"page_size\"\
                : $root.page_size,\n  \"total_items\": $root.total_items\n}\n"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "x92vt1"
        cacheKeyParameters:
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
  /shop-wines:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/shop-wines"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "s62tqc"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
          - "method.request.querystring.filter"
          - "method.request.querystring.page_size"
          - "method.request.querystring.page"
          - "method.request.querystring.sort"
  /shop-wines/{article_id}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "article_id"
          in: "path"
          required: true
          type: "string"
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "404 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_articles}/shop-wines/{article_id}"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.path.article_id: "method.request.path.article_id"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "m1pett"
        cacheKeyParameters:
          - "method.request.header.App-ID"
          - "method.request.header.App-Key"
          - "method.request.path.article_id"
  /store-channels:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_stores}/store-channels"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "ret4wy"
        cacheKeyParameters:
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
  /store-services:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_stores}/store-services"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "r0t0eg"
        cacheKeyParameters:
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
  /stores:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "App-ID"
          in: "header"
          required: false
          type: "string"
        - name: "filter"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      x-amazon-apigateway-integration:
        type: "http"
        httpMethod: "GET"
        uri: "https://${stageVariables.url_stores}/stores"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestParameters:
          integration.request.querystring.page: "method.request.querystring.page"
          integration.request.header.App-Key: "method.request.header.App-Key"
          integration.request.querystring.filter: "method.request.querystring.filter"
          integration.request.querystring.only_online_publishable: "'yes'"
          integration.request.querystring.page_size: "method.request.querystring.page_size"
          integration.request.querystring.sort: "method.request.querystring.sort"
          integration.request.header.App-ID: "method.request.header.App-ID"
        passthroughBehavior: "when_no_match"
        cacheNamespace: "0pxdef"
        cacheKeyParameters:
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.filter"
          - "method.request.header.App-Key"
          - "method.request.header.App-ID"
  /sweepstake-participants:
    get:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "App-Key"
          in: "header"
          required: false
          type: "string"
        - name: "sort"
          in: "query"
          required: false
          type: "string"
        - name: "page_size"
          in: "query"
          required: false
          type: "string"
        - name: "f.created_on"
          in: "query"
          required: false
          type: "string"
        - name: "page"
          in: "query"
          required: false
          type: "string"
        - name: "f.created_from"
          in: "query"
          required: false
          type: "string"
        - name: "f.created_to"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "500":
          description: "500 response"
          schema:
            $ref: "#/definitions/Error"
        "403":
          description: "403 response"
          schema:
            $ref: "#/definitions/Error"
        "406":
          description: "406 response"
          schema:
            $ref: "#/definitions/Error"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-appraisals-api-${stageVariables.lambda_env}_listSweepstakeParticipants:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
          "403":
            statusCode: "403"
          "5\\d{2}":
            statusCode: "500"
          "406":
            statusCode: "406"
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n\
            {\r\n  \"serialization\": {\"group\": \"portal-listing\"},\r\n  \"query\"\
            : \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\
            \r\n}"
        passthroughBehavior: "when_no_templates"
        cacheNamespace: "ahyiw5"
        cacheKeyParameters:
          - "method.request.querystring.sort"
          - "method.request.querystring.page"
          - "method.request.querystring.page_size"
          - "method.request.querystring.f.created_on"
          - "method.request.querystring.f.created_from"
          - "method.request.querystring.f.created_to"
securityDefinitions:
  AppKeyHeader:
    type: "apiKey"
    name: "App-Key"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      type: "token"
      authorizerUri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-lambda-tools_authorizeApiRequest:live/invocations"
      authorizerCredentials: "arn:aws:iam::802555642192:role/aws-apigateway-role.denner-api"
      authorizerResultTtlInSeconds: 3600
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
  Error:
    type: "object"
    properties:
      type:
        type: "string"
      title:
        type: "string"
      status:
        type: "integer"
      detail:
        type: "string"
    title: "Error Schema"
